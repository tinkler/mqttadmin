// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: role/v1/role.proto

package role_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleGsrvClient is the client API for RoleGsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleGsrvClient interface {
	RoleSave(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
}

type roleGsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleGsrvClient(cc grpc.ClientConnInterface) RoleGsrvClient {
	return &roleGsrvClient{cc}
}

func (c *roleGsrvClient) RoleSave(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/role.v1.RoleGsrv/RoleSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleGsrvServer is the server API for RoleGsrv service.
// All implementations must embed UnimplementedRoleGsrvServer
// for forward compatibility
type RoleGsrvServer interface {
	RoleSave(context.Context, *anypb.Any) (*anypb.Any, error)
	mustEmbedUnimplementedRoleGsrvServer()
}

// UnimplementedRoleGsrvServer must be embedded to have forward compatible implementations.
type UnimplementedRoleGsrvServer struct {
}

func (UnimplementedRoleGsrvServer) RoleSave(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleSave not implemented")
}
func (UnimplementedRoleGsrvServer) mustEmbedUnimplementedRoleGsrvServer() {}

// UnsafeRoleGsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleGsrvServer will
// result in compilation errors.
type UnsafeRoleGsrvServer interface {
	mustEmbedUnimplementedRoleGsrvServer()
}

func RegisterRoleGsrvServer(s grpc.ServiceRegistrar, srv RoleGsrvServer) {
	s.RegisterService(&RoleGsrv_ServiceDesc, srv)
}

func _RoleGsrv_RoleSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleGsrvServer).RoleSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/role.v1.RoleGsrv/RoleSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleGsrvServer).RoleSave(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleGsrv_ServiceDesc is the grpc.ServiceDesc for RoleGsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleGsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role.v1.RoleGsrv",
	HandlerType: (*RoleGsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoleSave",
			Handler:    _RoleGsrv_RoleSave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role/v1/role.proto",
}
