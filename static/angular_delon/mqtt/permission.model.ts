// Code generated by github.com/tinkler/mqttadmin; DO NOT EDIT.
import { Role } from './role.model';
import { User } from './user.model';


import { _HttpClient } from '@delon/theme';
import { modelUrlPrefix  } from './const';

export interface Permission {
	
	id: number;
	
	name: string;
	
	
	savePermission(): Promise<void>;
	
	deletePermission(): Promise<void>;
	
}

export class Permission {
	
	id: number = 0;
	
	name: string = "";
	

	constructor(
		private http: _HttpClient,
	){}

	
	savePermission(): Promise<void> {
		return new Promise((resolve, reject) => {
			this.http.post(`${modelUrlPrefix}/permission/permission/save-permission`, { data: this, args: {  } }).subscribe({
				next: (res: { code: number; data: { data: any, resp: {} }, message: string } ) => {
					if (res.code === 0) {
						this.id = res.data.data['id'];
						this.name = res.data.data['name'];
						
						resolve();
					} else {
						reject(res.message);
					}
				}, error: (err) => {
					reject(err);
				}
			});
		});
	}
	
	deletePermission(): Promise<void> {
		return new Promise((resolve, reject) => {
			this.http.post(`${modelUrlPrefix}/permission/permission/delete-permission`, { data: this, args: {  } }).subscribe({
				next: (res: { code: number; data: { data: any, resp: {} }, message: string } ) => {
					if (res.code === 0) {
						this.id = res.data.data['id'];
						this.name = res.data.data['name'];
						
						resolve();
					} else {
						reject(res.message);
					}
				}, error: (err) => {
					reject(err);
				}
			});
		});
	}
	
}


export interface RolePermission {
	
	id: number;
	
	role: Role;
	
	permission: Permission;
	
	
	savePermission(): Promise<void>;
	
	deletePermission(): Promise<void>;
	
}

export class RolePermission {
	
	id: number = 0;
	
	role: Role = new Role(this.http);
	
	permission: Permission = new Permission(this.http);
	

	constructor(
		private http: _HttpClient,
	){}

	
	savePermission(): Promise<void> {
		return new Promise((resolve, reject) => {
			this.http.post(`${modelUrlPrefix}/permission/role_permission/save-permission`, { data: this, args: {  } }).subscribe({
				next: (res: { code: number; data: { data: any, resp: {} }, message: string } ) => {
					if (res.code === 0) {
						this.id = res.data.data['id'];
						this.role = res.data.data['role'];
						this.permission = res.data.data['permission'];
						
						resolve();
					} else {
						reject(res.message);
					}
				}, error: (err) => {
					reject(err);
				}
			});
		});
	}
	
	deletePermission(): Promise<void> {
		return new Promise((resolve, reject) => {
			this.http.post(`${modelUrlPrefix}/permission/role_permission/delete-permission`, { data: this, args: {  } }).subscribe({
				next: (res: { code: number; data: { data: any, resp: {} }, message: string } ) => {
					if (res.code === 0) {
						this.id = res.data.data['id'];
						this.role = res.data.data['role'];
						this.permission = res.data.data['permission'];
						
						resolve();
					} else {
						reject(res.message);
					}
				}, error: (err) => {
					reject(err);
				}
			});
		});
	}
	
}


export interface UserPermission {
	
	id: number;
	
	user: User;
	
	permission: Permission;
	
	
	savePermission(): Promise<void>;
	
	deletePermission(): Promise<void>;
	
}

export class UserPermission {
	
	id: number = 0;
	
	user: User = new User(this.http);
	
	permission: Permission = new Permission(this.http);
	

	constructor(
		private http: _HttpClient,
	){}

	
	savePermission(): Promise<void> {
		return new Promise((resolve, reject) => {
			this.http.post(`${modelUrlPrefix}/permission/user_permission/save-permission`, { data: this, args: {  } }).subscribe({
				next: (res: { code: number; data: { data: any, resp: {} }, message: string } ) => {
					if (res.code === 0) {
						this.id = res.data.data['id'];
						this.user = res.data.data['user'];
						this.permission = res.data.data['permission'];
						
						resolve();
					} else {
						reject(res.message);
					}
				}, error: (err) => {
					reject(err);
				}
			});
		});
	}
	
	deletePermission(): Promise<void> {
		return new Promise((resolve, reject) => {
			this.http.post(`${modelUrlPrefix}/permission/user_permission/delete-permission`, { data: this, args: {  } }).subscribe({
				next: (res: { code: number; data: { data: any, resp: {} }, message: string } ) => {
					if (res.code === 0) {
						this.id = res.data.data['id'];
						this.user = res.data.data['user'];
						this.permission = res.data.data['permission'];
						
						resolve();
					} else {
						reject(res.message);
					}
				}, error: (err) => {
					reject(err);
				}
			});
		});
	}
	
}




