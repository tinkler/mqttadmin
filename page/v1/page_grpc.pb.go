// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: page/v1/page.proto

package page_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PageGsrvClient is the client API for PageGsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageGsrvClient interface {
	PageFetchUser(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	PageRowGenRow(ctx context.Context, opts ...grpc.CallOption) (PageGsrv_PageRowGenRowClient, error)
}

type pageGsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewPageGsrvClient(cc grpc.ClientConnInterface) PageGsrvClient {
	return &pageGsrvClient{cc}
}

func (c *pageGsrvClient) PageFetchUser(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/page.v1.PageGsrv/PageFetchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageGsrvClient) PageRowGenRow(ctx context.Context, opts ...grpc.CallOption) (PageGsrv_PageRowGenRowClient, error) {
	stream, err := c.cc.NewStream(ctx, &PageGsrv_ServiceDesc.Streams[0], "/page.v1.PageGsrv/PageRowGenRow", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageGsrvPageRowGenRowClient{stream}
	return x, nil
}

type PageGsrv_PageRowGenRowClient interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ClientStream
}

type pageGsrvPageRowGenRowClient struct {
	grpc.ClientStream
}

func (x *pageGsrvPageRowGenRowClient) Send(m *anypb.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pageGsrvPageRowGenRowClient) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PageGsrvServer is the server API for PageGsrv service.
// All implementations must embed UnimplementedPageGsrvServer
// for forward compatibility
type PageGsrvServer interface {
	PageFetchUser(context.Context, *anypb.Any) (*anypb.Any, error)
	PageRowGenRow(PageGsrv_PageRowGenRowServer) error
	mustEmbedUnimplementedPageGsrvServer()
}

// UnimplementedPageGsrvServer must be embedded to have forward compatible implementations.
type UnimplementedPageGsrvServer struct {
}

func (UnimplementedPageGsrvServer) PageFetchUser(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageFetchUser not implemented")
}
func (UnimplementedPageGsrvServer) PageRowGenRow(PageGsrv_PageRowGenRowServer) error {
	return status.Errorf(codes.Unimplemented, "method PageRowGenRow not implemented")
}
func (UnimplementedPageGsrvServer) mustEmbedUnimplementedPageGsrvServer() {}

// UnsafePageGsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageGsrvServer will
// result in compilation errors.
type UnsafePageGsrvServer interface {
	mustEmbedUnimplementedPageGsrvServer()
}

func RegisterPageGsrvServer(s grpc.ServiceRegistrar, srv PageGsrvServer) {
	s.RegisterService(&PageGsrv_ServiceDesc, srv)
}

func _PageGsrv_PageFetchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageGsrvServer).PageFetchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/page.v1.PageGsrv/PageFetchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageGsrvServer).PageFetchUser(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageGsrv_PageRowGenRow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PageGsrvServer).PageRowGenRow(&pageGsrvPageRowGenRowServer{stream})
}

type PageGsrv_PageRowGenRowServer interface {
	Send(*anypb.Any) error
	Recv() (*anypb.Any, error)
	grpc.ServerStream
}

type pageGsrvPageRowGenRowServer struct {
	grpc.ServerStream
}

func (x *pageGsrvPageRowGenRowServer) Send(m *anypb.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pageGsrvPageRowGenRowServer) Recv() (*anypb.Any, error) {
	m := new(anypb.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PageGsrv_ServiceDesc is the grpc.ServiceDesc for PageGsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageGsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "page.v1.PageGsrv",
	HandlerType: (*PageGsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageFetchUser",
			Handler:    _PageGsrv_PageFetchUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PageRowGenRow",
			Handler:       _PageGsrv_PageRowGenRow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "page/v1/page.proto",
}
