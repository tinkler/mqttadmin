// Code generated by github.com/tinkler/mqttadmin; DO NOT EDIT.
package gsrv
import (
	"context"
	mrz "github.com/tinkler/mqttadmin/mrz/v1"
	"github.com/tinkler/mqttadmin/pkg/model/permission"
	pb_permission_v1 "github.com/tinkler/mqttadmin/permission/v1"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)


type permissionGsrv struct {
	pb_permission_v1.UnimplementedPermissionGsrvServer
}

func NewPermissionGsrv() *permissionGsrv {
	return &permissionGsrv{}
}


func (u *permissionGsrv) PermissionSavePermission(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_permission_v1.Permission, *structpb.Struct](in)
	m := mrz.GetData[*permission.Permission](gm)
	res := mrz.NewTypedRes[*pb_permission_v1.Permission, *structpb.Value]()
	err = m.SavePermission(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *permissionGsrv) PermissionDeletePermission(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_permission_v1.Permission, *structpb.Struct](in)
	m := mrz.GetData[*permission.Permission](gm)
	res := mrz.NewTypedRes[*pb_permission_v1.Permission, *structpb.Value]()
	err = m.DeletePermission(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *permissionGsrv) RolePermissionSavePermission(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_permission_v1.RolePermission, *structpb.Struct](in)
	m := mrz.GetData[*permission.RolePermission](gm)
	res := mrz.NewTypedRes[*pb_permission_v1.RolePermission, *structpb.Value]()
	err = m.SavePermission(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *permissionGsrv) RolePermissionDeletePermission(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_permission_v1.RolePermission, *structpb.Struct](in)
	m := mrz.GetData[*permission.RolePermission](gm)
	res := mrz.NewTypedRes[*pb_permission_v1.RolePermission, *structpb.Value]()
	err = m.DeletePermission(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *permissionGsrv) UserPermissionSavePermission(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_permission_v1.UserPermission, *structpb.Struct](in)
	m := mrz.GetData[*permission.UserPermission](gm)
	res := mrz.NewTypedRes[*pb_permission_v1.UserPermission, *structpb.Value]()
	err = m.SavePermission(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *permissionGsrv) UserPermissionDeletePermission(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_permission_v1.UserPermission, *structpb.Struct](in)
	m := mrz.GetData[*permission.UserPermission](gm)
	res := mrz.NewTypedRes[*pb_permission_v1.UserPermission, *structpb.Value]()
	err = m.DeletePermission(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

