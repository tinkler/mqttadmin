// Code generated by github.com/tinkler/mqttadmin; DO NOT EDIT.
package gsrv
import (
	"context"
	mrz "github.com/tinkler/mqttadmin/mrz/v1"
	"github.com/tinkler/mqttadmin/pkg/model/user"
	pb_user_v1 "github.com/tinkler/mqttadmin/user/v1"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	"github.com/tinkler/mqttadmin/pkg/model/role"
)


type userGsrv struct {
	pb_user_v1.UnimplementedUserGsrvServer
}

func NewUserGsrv() *userGsrv {
	return &userGsrv{}
}


func (u *userGsrv) AuthSignin(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.Auth, *structpb.Struct](in)
	m := mrz.GetData[*user.Auth](gm)
	res := mrz.NewTypedRes[*pb_user_v1.Auth, *structpb.Value]()
	var resData *user.Auth
	resData, err = m.Signin(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResResp(res, resData)
	return res.ToAny(), nil
}

func (u *userGsrv) AuthQuickSignin(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.Auth, *structpb.Struct](in)
	m := mrz.GetData[*user.Auth](gm)
	res := mrz.NewTypedRes[*pb_user_v1.Auth, *structpb.Value]()
	err = m.QuickSignin(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *userGsrv) AuthSignup(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.Auth, *structpb.Struct](in)
	m := mrz.GetData[*user.Auth](gm)
	res := mrz.NewTypedRes[*pb_user_v1.Auth, *structpb.Value]()
	var resData *user.Auth
	resData, err = m.Signup(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResResp(res, resData)
	return res.ToAny(), nil
}

func (u *userGsrv) UserProfileSave(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.UserProfile, *structpb.Struct](in)
	m := mrz.GetData[*user.UserProfile](gm)
	res := mrz.NewTypedRes[*pb_user_v1.UserProfile, *structpb.Value]()
	err = m.Save(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *userGsrv) UserSave(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.User, *structpb.Struct](in)
	m := mrz.GetData[*user.User](gm)
	res := mrz.NewTypedRes[*pb_user_v1.User, *structpb.Value]()
	err = m.Save(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *userGsrv) UserAddRole(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.User, *structpb.Struct](in)
	m := mrz.GetData[*user.User](gm)
	res := mrz.NewTypedRes[*pb_user_v1.User, *structpb.Value]()
	err = m.AddRole(ctx, mrz.GetArgs[*role.Role](gm,"role"), )
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *userGsrv) UserRemoveRole(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.User, *structpb.Struct](in)
	m := mrz.GetData[*user.User](gm)
	res := mrz.NewTypedRes[*pb_user_v1.User, *structpb.Value]()
	err = m.RemoveRole(ctx, mrz.GetArgs[*role.Role](gm,"role"), )
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *userGsrv) UserGet(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.User, *structpb.Struct](in)
	m := mrz.GetData[*user.User](gm)
	res := mrz.NewTypedRes[*pb_user_v1.User, *structpb.Value]()
	err = m.Get(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *userGsrv) UserGetRoles(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.User, *structpb.Struct](in)
	m := mrz.GetData[*user.User](gm)
	res := mrz.NewTypedRes[*pb_user_v1.User, *structpb.Value]()
	err = m.GetRoles(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

func (u *userGsrv) UserRoleSave(ctx context.Context, in *anypb.Any) (out *anypb.Any, err error) {
	gm := mrz.ToTypedModel[*pb_user_v1.UserRole, *structpb.Struct](in)
	m := mrz.GetData[*user.UserRole](gm)
	res := mrz.NewTypedRes[*pb_user_v1.UserRole, *structpb.Value]()
	err = m.Save(ctx)
	if err != nil {
		return nil, err
	}
	mrz.SetResData(res, m)
	mrz.SetResRespNil(res)
	return res.ToAny(), nil
}

