// Code generated by github.com/tinkler/mqttadmin; DO NOT EDIT.
package route
import (
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/tinkler/mqttadmin/pkg/jsonz/sjson"
	"github.com/tinkler/mqttadmin/pkg/model/user"
	"github.com/tinkler/mqttadmin/pkg/status"
	"github.com/tinkler/mqttadmin/pkg/model/role"
)

func RoutesUser(m chi.Router) {
	m.Route("/user", func(r chi.Router) {
		
		r.Post("/user/save", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*user.User, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*user.User,any]{Data:m.Data}
			err = m.Data.Save(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/user/add-role", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*user.User, struct{
				Role *role.Role 
				 } ]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*user.User,any]{Data:m.Data}
			err = m.Data.AddRole(r.Context(), m.Args.Role, )
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/user_profile/save", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*user.UserProfile, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*user.UserProfile,any]{Data:m.Data}
			err = m.Data.Save(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/user_role/save", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*user.UserRole, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*user.UserRole,any]{Data:m.Data}
			err = m.Data.Save(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/auth/signin", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*user.Auth, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*user.Auth,*user.Auth]{Data:m.Data}
			res.Resp, err = m.Data.Signin(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/auth/quick-signin", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*user.Auth, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*user.Auth,any]{Data:m.Data}
			err = m.Data.QuickSignin(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
		r.Post("/auth/signup", func(w http.ResponseWriter, r *http.Request) {
			m := Model[*user.Auth, any]{}
			err := sjson.Bind(r, &m)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			res := Res[*user.Auth,*user.Auth]{Data:m.Data}
			res.Resp, err = m.Data.Signup(r.Context())
			
			if status.HttpError(w, err) {
				return
			}
			if sjson.HttpWrite(w, res) {
				return
			}

		})
	})
}
