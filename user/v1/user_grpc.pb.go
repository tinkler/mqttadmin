// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: user/v1/user.proto

package user_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserGsrvClient is the client API for UserGsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGsrvClient interface {
	UserProfileSave(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	AuthSignin(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	AuthQuickSignin(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	AuthSignup(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	UserSave(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	UserAddRole(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	UserRemoveRole(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	UserGet(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	UserGetRoles(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	UserRoleSave(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
}

type userGsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGsrvClient(cc grpc.ClientConnInterface) UserGsrvClient {
	return &userGsrvClient{cc}
}

func (c *userGsrvClient) UserProfileSave(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/UserProfileSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) AuthSignin(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/AuthSignin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) AuthQuickSignin(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/AuthQuickSignin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) AuthSignup(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/AuthSignup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) UserSave(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/UserSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) UserAddRole(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/UserAddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) UserRemoveRole(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/UserRemoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) UserGet(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) UserGetRoles(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/UserGetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGsrvClient) UserRoleSave(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/user.v1.UserGsrv/UserRoleSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGsrvServer is the server API for UserGsrv service.
// All implementations must embed UnimplementedUserGsrvServer
// for forward compatibility
type UserGsrvServer interface {
	UserProfileSave(context.Context, *anypb.Any) (*anypb.Any, error)
	AuthSignin(context.Context, *anypb.Any) (*anypb.Any, error)
	AuthQuickSignin(context.Context, *anypb.Any) (*anypb.Any, error)
	AuthSignup(context.Context, *anypb.Any) (*anypb.Any, error)
	UserSave(context.Context, *anypb.Any) (*anypb.Any, error)
	UserAddRole(context.Context, *anypb.Any) (*anypb.Any, error)
	UserRemoveRole(context.Context, *anypb.Any) (*anypb.Any, error)
	UserGet(context.Context, *anypb.Any) (*anypb.Any, error)
	UserGetRoles(context.Context, *anypb.Any) (*anypb.Any, error)
	UserRoleSave(context.Context, *anypb.Any) (*anypb.Any, error)
	mustEmbedUnimplementedUserGsrvServer()
}

// UnimplementedUserGsrvServer must be embedded to have forward compatible implementations.
type UnimplementedUserGsrvServer struct {
}

func (UnimplementedUserGsrvServer) UserProfileSave(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfileSave not implemented")
}
func (UnimplementedUserGsrvServer) AuthSignin(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignin not implemented")
}
func (UnimplementedUserGsrvServer) AuthQuickSignin(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthQuickSignin not implemented")
}
func (UnimplementedUserGsrvServer) AuthSignup(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignup not implemented")
}
func (UnimplementedUserGsrvServer) UserSave(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSave not implemented")
}
func (UnimplementedUserGsrvServer) UserAddRole(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddRole not implemented")
}
func (UnimplementedUserGsrvServer) UserRemoveRole(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRemoveRole not implemented")
}
func (UnimplementedUserGsrvServer) UserGet(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedUserGsrvServer) UserGetRoles(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetRoles not implemented")
}
func (UnimplementedUserGsrvServer) UserRoleSave(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleSave not implemented")
}
func (UnimplementedUserGsrvServer) mustEmbedUnimplementedUserGsrvServer() {}

// UnsafeUserGsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGsrvServer will
// result in compilation errors.
type UnsafeUserGsrvServer interface {
	mustEmbedUnimplementedUserGsrvServer()
}

func RegisterUserGsrvServer(s grpc.ServiceRegistrar, srv UserGsrvServer) {
	s.RegisterService(&UserGsrv_ServiceDesc, srv)
}

func _UserGsrv_UserProfileSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).UserProfileSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/UserProfileSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).UserProfileSave(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_AuthSignin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).AuthSignin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/AuthSignin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).AuthSignin(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_AuthQuickSignin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).AuthQuickSignin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/AuthQuickSignin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).AuthQuickSignin(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_AuthSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).AuthSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/AuthSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).AuthSignup(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_UserSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).UserSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/UserSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).UserSave(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_UserAddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).UserAddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/UserAddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).UserAddRole(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_UserRemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).UserRemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/UserRemoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).UserRemoveRole(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).UserGet(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_UserGetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).UserGetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/UserGetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).UserGetRoles(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGsrv_UserRoleSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGsrvServer).UserRoleSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.UserGsrv/UserRoleSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGsrvServer).UserRoleSave(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGsrv_ServiceDesc is the grpc.ServiceDesc for UserGsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserGsrv",
	HandlerType: (*UserGsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserProfileSave",
			Handler:    _UserGsrv_UserProfileSave_Handler,
		},
		{
			MethodName: "AuthSignin",
			Handler:    _UserGsrv_AuthSignin_Handler,
		},
		{
			MethodName: "AuthQuickSignin",
			Handler:    _UserGsrv_AuthQuickSignin_Handler,
		},
		{
			MethodName: "AuthSignup",
			Handler:    _UserGsrv_AuthSignup_Handler,
		},
		{
			MethodName: "UserSave",
			Handler:    _UserGsrv_UserSave_Handler,
		},
		{
			MethodName: "UserAddRole",
			Handler:    _UserGsrv_UserAddRole_Handler,
		},
		{
			MethodName: "UserRemoveRole",
			Handler:    _UserGsrv_UserRemoveRole_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _UserGsrv_UserGet_Handler,
		},
		{
			MethodName: "UserGetRoles",
			Handler:    _UserGsrv_UserGetRoles_Handler,
		},
		{
			MethodName: "UserRoleSave",
			Handler:    _UserGsrv_UserRoleSave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
