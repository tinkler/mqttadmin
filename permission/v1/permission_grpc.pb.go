// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: permission/v1/permission.proto

package permission_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionGsrvClient is the client API for PermissionGsrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionGsrvClient interface {
	PermissionSavePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	PermissionDeletePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	RolePermissionSavePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	RolePermissionDeletePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	UserPermissionSavePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
	UserPermissionDeletePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error)
}

type permissionGsrvClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionGsrvClient(cc grpc.ClientConnInterface) PermissionGsrvClient {
	return &permissionGsrvClient{cc}
}

func (c *permissionGsrvClient) PermissionSavePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/permission.v1.PermissionGsrv/PermissionSavePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionGsrvClient) PermissionDeletePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/permission.v1.PermissionGsrv/PermissionDeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionGsrvClient) RolePermissionSavePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/permission.v1.PermissionGsrv/RolePermissionSavePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionGsrvClient) RolePermissionDeletePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/permission.v1.PermissionGsrv/RolePermissionDeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionGsrvClient) UserPermissionSavePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/permission.v1.PermissionGsrv/UserPermissionSavePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionGsrvClient) UserPermissionDeletePermission(ctx context.Context, in *anypb.Any, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/permission.v1.PermissionGsrv/UserPermissionDeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionGsrvServer is the server API for PermissionGsrv service.
// All implementations must embed UnimplementedPermissionGsrvServer
// for forward compatibility
type PermissionGsrvServer interface {
	PermissionSavePermission(context.Context, *anypb.Any) (*anypb.Any, error)
	PermissionDeletePermission(context.Context, *anypb.Any) (*anypb.Any, error)
	RolePermissionSavePermission(context.Context, *anypb.Any) (*anypb.Any, error)
	RolePermissionDeletePermission(context.Context, *anypb.Any) (*anypb.Any, error)
	UserPermissionSavePermission(context.Context, *anypb.Any) (*anypb.Any, error)
	UserPermissionDeletePermission(context.Context, *anypb.Any) (*anypb.Any, error)
	mustEmbedUnimplementedPermissionGsrvServer()
}

// UnimplementedPermissionGsrvServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionGsrvServer struct {
}

func (UnimplementedPermissionGsrvServer) PermissionSavePermission(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionSavePermission not implemented")
}
func (UnimplementedPermissionGsrvServer) PermissionDeletePermission(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionDeletePermission not implemented")
}
func (UnimplementedPermissionGsrvServer) RolePermissionSavePermission(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePermissionSavePermission not implemented")
}
func (UnimplementedPermissionGsrvServer) RolePermissionDeletePermission(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePermissionDeletePermission not implemented")
}
func (UnimplementedPermissionGsrvServer) UserPermissionSavePermission(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPermissionSavePermission not implemented")
}
func (UnimplementedPermissionGsrvServer) UserPermissionDeletePermission(context.Context, *anypb.Any) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPermissionDeletePermission not implemented")
}
func (UnimplementedPermissionGsrvServer) mustEmbedUnimplementedPermissionGsrvServer() {}

// UnsafePermissionGsrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionGsrvServer will
// result in compilation errors.
type UnsafePermissionGsrvServer interface {
	mustEmbedUnimplementedPermissionGsrvServer()
}

func RegisterPermissionGsrvServer(s grpc.ServiceRegistrar, srv PermissionGsrvServer) {
	s.RegisterService(&PermissionGsrv_ServiceDesc, srv)
}

func _PermissionGsrv_PermissionSavePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionGsrvServer).PermissionSavePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.PermissionGsrv/PermissionSavePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionGsrvServer).PermissionSavePermission(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionGsrv_PermissionDeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionGsrvServer).PermissionDeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.PermissionGsrv/PermissionDeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionGsrvServer).PermissionDeletePermission(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionGsrv_RolePermissionSavePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionGsrvServer).RolePermissionSavePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.PermissionGsrv/RolePermissionSavePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionGsrvServer).RolePermissionSavePermission(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionGsrv_RolePermissionDeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionGsrvServer).RolePermissionDeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.PermissionGsrv/RolePermissionDeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionGsrvServer).RolePermissionDeletePermission(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionGsrv_UserPermissionSavePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionGsrvServer).UserPermissionSavePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.PermissionGsrv/UserPermissionSavePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionGsrvServer).UserPermissionSavePermission(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionGsrv_UserPermissionDeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(anypb.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionGsrvServer).UserPermissionDeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/permission.v1.PermissionGsrv/UserPermissionDeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionGsrvServer).UserPermissionDeletePermission(ctx, req.(*anypb.Any))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionGsrv_ServiceDesc is the grpc.ServiceDesc for PermissionGsrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionGsrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "permission.v1.PermissionGsrv",
	HandlerType: (*PermissionGsrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PermissionSavePermission",
			Handler:    _PermissionGsrv_PermissionSavePermission_Handler,
		},
		{
			MethodName: "PermissionDeletePermission",
			Handler:    _PermissionGsrv_PermissionDeletePermission_Handler,
		},
		{
			MethodName: "RolePermissionSavePermission",
			Handler:    _PermissionGsrv_RolePermissionSavePermission_Handler,
		},
		{
			MethodName: "RolePermissionDeletePermission",
			Handler:    _PermissionGsrv_RolePermissionDeletePermission_Handler,
		},
		{
			MethodName: "UserPermissionSavePermission",
			Handler:    _PermissionGsrv_UserPermissionSavePermission_Handler,
		},
		{
			MethodName: "UserPermissionDeletePermission",
			Handler:    _PermissionGsrv_UserPermissionDeletePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permission/v1/permission.proto",
}
